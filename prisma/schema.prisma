// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  phone     String?   @unique
  admin    Boolean  @default(false)
  username  String @unique
  lastActive DateTime @default(now())
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  bio      String?
  avatar   String?
  socials  Social[]
  ratings  Rating[] @relation("UserRating")
  ratedBy  Rating[] @relation("AuthorRating")
  listings Listing[]
  interests Category[]
  following User[] @relation("Following")
  followers User[] @relation("Following")
  likedListings Listing[] @relation("Liked")
  chats Chat[] @relation("ChatUsers")
  messages Message[]
  reports Report[] @relation("Reports")
  reported Report[] @relation("Reported")
  verified Boolean @default(false)
  verificationToken VerificationToken?
  resetToken ResetToken?
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int @unique
  createdAt DateTime @default(now())
}

model ResetToken {
  id Int @id @default(autoincrement())
  token String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
  createdAt DateTime @default(now())
}

model Social {
  id        Int      @id @default(autoincrement())
  type      SocialType
  url       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum SocialType{
  FACEBOOK
  INSTAGRAM
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id], name: "UserRating")
  userId    Int
  author User @relation(fields: [authorId], references: [id], name:"AuthorRating")
  authorId Int
  createdAt DateTime @default(now())
}

model Listing{
  id        Int      @id @default(autoincrement())
  title     String
  description String?
  location  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  images    Image[]
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  likedBy     User[] @relation("Liked")
  sentIn Message[] @relation("SentListing")
  referencedIn Message[]
  reports Report[]
}

model Image{
  id        Int      @id @default(autoincrement())
  url       String
  main Boolean  @default(false)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
}

model Category{
  id        Int      @id @default(autoincrement())
  title     String
  parentCategories Category[] @relation("SubCategories")
  subCategories Category[] @relation("SubCategories")
  listings Listing[]
  applicable Boolean @default(false)
  icon String?
  core Boolean @default(false)
  interestedBy User[]
}

model Chat{
  id        Int      @id @default(autoincrement())
  messages Message[]
  updatedAt DateTime @updatedAt
  users User[] @relation("ChatUsers")
}

model Message{
  id        Int      @id @default(autoincrement())
  text String?
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  image String?
  listings Listing[] @relation("SentListing")
  read Boolean @default(false)
  referencedListing Listing? @relation(fields: [referencedListingId], references: [id])
  referencedListingId Int?
  reports Report[]
}

model Report {
  id  Int  @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id], name: "Reported")
  authorId Int
  user User? @relation(fields: [userId], references: [id], name: "Reports")
  userId Int?
  listing Listing? @relation(fields: [listingId], references: [id])
  listingId Int?
  message Message? @relation(fields: [messageId], references: [id])
  messageId Int?
  type ReportType
  text String?
}

enum ReportType {
  EXPLICIT
  SPAM
  OTHER
}




